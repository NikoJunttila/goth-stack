package delivery

import (
    "gothstack/app/views/layouts"
    "fmt"
    "time"
)

// Format time in a readable format
func formatTime(t time.Time) string {
    if t.IsZero() {
        return "Not set"
    }
    return t.Format("2006-01-02 15:04")
}

// DeliveryList renders a list of deliveries
templ DeliveryList(deliveries []DeliveryInfo) {
    @layouts.App() {
        <div class="mt-32 flex flex-col gap-12 max-w-6xl mx-auto">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-bold">Deliveries</h1>
                <div class="flex gap-4">
                    <a href="/dashboard" class="text-blue-500 hover:underline">Dashboard</a>
                    <a href="/deliveries/new" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        Add New Delivery
                    </a>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Address</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Scheduled</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Driver</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        for _, delivery := range deliveries {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ fmt.Sprintf("%d", delivery.ID) }</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    if delivery.Order.UserProfile.ID > 0 {
                                        <div class="flex flex-col">
                                            <span>{ delivery.Order.UserProfile.PhoneNumber }</span>
                                            if delivery.DeliveryNotes != "" {
                                                <span class="text-xs text-gray-400">Note: { delivery.DeliveryNotes }</span>
                                            }
                                        </div>
                                    } else {
                                        <span>Unknown</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <div class="flex flex-col">
                                        <span>{ delivery.DeliveryAddress }</span>
                                        <span class="text-xs text-gray-400">{ fmt.Sprintf("%.6f, %.6f", delivery.Latitude, delivery.Longitude) }</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class={getStatusClass(delivery.DeliveryStatus)}>
                                        { delivery.DeliveryStatus }
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    { formatTime(delivery.ScheduledTime) }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    if delivery.DriverID != nil {
                                        <span>{ fmt.Sprintf("Driver #%d", *delivery.DriverID) }</span>
                                    } else {
                                        <span class="text-yellow-500">Unassigned</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex gap-2">
                                        <a href={ templ.SafeURL(fmt.Sprintf("/deliveries/%d", delivery.ID)) } class="text-indigo-600 hover:text-indigo-900">
                                            View
                                        </a>
                                        <a href={ templ.SafeURL(fmt.Sprintf("/deliveries/%d/edit", delivery.ID)) } class="text-blue-600 hover:text-blue-900">
                                            Edit
                                        </a>
                                        <button 
                                            hx-delete={ fmt.Sprintf("/deliveries/%d", delivery.ID) }
                                            hx-confirm="Are you sure you want to delete this delivery?"
                                            class="text-red-600 hover:text-red-900">
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                        if len(deliveries) == 0 {
                            <tr>
                                <td colspan="7" class="px-6 py-4 text-center text-sm text-gray-500">No deliveries found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-bold mb-4">Delivery Management</h2>
                <div class="flex gap-4">
                    <button 
                        hx-post="/deliveries/assign-all"
                        class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
                        Auto-Assign All Deliveries
                    </button>
                    <button 
                        hx-post="/deliveries/optimize-routes"
                        class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        Optimize Routes
                    </button>
                </div>
            </div>
        </div>
    }
}

// DeliveryDetail renders details for a single delivery
templ DeliveryDetail(delivery DeliveryInfo) {
    @layouts.App() {
        <div class="mt-32 flex flex-col gap-8 max-w-4xl mx-auto">
            <div class="flex gap-4">
                <a href="/deliveries" class="text-sm underline">back to all deliveries</a>
            </div>
            
            <div class="bg-white p-8 rounded-lg shadow-lg">
                <h1 class="text-2xl font-bold mb-6">Delivery #{ fmt.Sprintf("%d", delivery.ID) }</h1>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Order ID</h3>
                            <p class="mt-1">{ fmt.Sprintf("%d", delivery.OrderID) }</p>
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Status</h3>
                            <p class={getStatusClass(delivery.DeliveryStatus)}>{ delivery.DeliveryStatus }</p>
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Scheduled Time</h3>
                            <p class="mt-1">{ formatTime(delivery.ScheduledTime) }</p>
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Actual Time</h3>
                            if delivery.ActualTime != nil {
                                <p class="mt-1">{ formatTime(*delivery.ActualTime) }</p>
                            } else {
                                <p class="mt-1 text-gray-400">Not delivered yet</p>
                            }
                        </div>
                    </div>
                    
                    <div class="space-y-4">
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Customer</h3>
                            if delivery.Order.UserProfile.ID > 0 {
                                <p class="mt-1">{ delivery.Order.UserProfile.PhoneNumber }</p>
                            } else {
                                <p class="mt-1">Unknown</p>
                            }
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Address</h3>
                            <p class="mt-1">{ delivery.DeliveryAddress }</p>
                            <p class="text-xs text-gray-400">{ fmt.Sprintf("%.6f, %.6f", delivery.Latitude, delivery.Longitude) }</p>
                            if delivery.CustomAddress {
                                <span class="text-xs text-blue-500">(Custom address)</span>
                            }
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Driver</h3>
                            if delivery.DriverID != nil {
                                <p class="mt-1">Driver #{ fmt.Sprintf("%d", *delivery.DriverID) }</p>
                            } else {
                                <p class="mt-1 text-yellow-500">Unassigned</p>
                            }
                        </div>
                        
                        <div>
                            <h3 class="text-sm font-medium text-gray-500">Notes</h3>
                            if delivery.DeliveryNotes != "" {
                                <p class="mt-1">{ delivery.DeliveryNotes }</p>
                            } else {
                                <p class="mt-1 text-gray-400">No notes</p>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="mt-8 flex gap-4">
                    <a 
                        href={ templ.SafeURL(fmt.Sprintf("/deliveries/%d/edit", delivery.ID)) }
                        class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        Edit Delivery
                    </a>
                    if delivery.DeliveryStatus != "completed" && delivery.DeliveryStatus != "cancelled" {
                        <button 
                            hx-put={ fmt.Sprintf("/deliveries/%d/status", delivery.ID) }
                            class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
                            Mark as Completed
                        </button>
                    }
                    if delivery.DriverID == nil {
                        <button 
                            hx-get="/drivers/available"
                            hx-target="#driver-assignment-modal"
                            hx-trigger="click"
                            class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded">
                            Assign Driver
                        </button>
                    }
                </div>
            </div>
            
            <div id="driver-assignment-modal"></div>
        </div>
    }
}

// Helper function to get CSS class for delivery status
func getStatusClass(status string) string {
    baseClass := "px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full "
    switch status {
    case "scheduled":
        return baseClass + "bg-yellow-100 text-yellow-800"
    case "in_progress":
        return baseClass + "bg-blue-100 text-blue-800"
    case "completed":
        return baseClass + "bg-green-100 text-green-800"
    case "cancelled":
        return baseClass + "bg-red-100 text-red-800"
    default:
        return baseClass + "bg-gray-100 text-gray-800"
    }
}